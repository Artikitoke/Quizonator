{"version":3,"file":"background.bundle.js","mappings":"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","sources":["webpack://quizonator/./src/background/background.js","webpack://quizonator/./src/background/analitics/Api.js"],"sourcesContent":["\r\nimport { sendDataToBackend  } from './analitics/Api.js';\r\nfunction sendMessageToContentScript(tabId, message) {\r\n  chrome.tabs.sendMessage(tabId, { action: 'ping' }, function (response) {\r\n    if (chrome.runtime.lastError || !response || response.status !== 'contentScriptActive') {\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId: tabId },\r\n          files: ['contentScript.bundle.js', 'vendor/katex/katex.min.js'],\r\n        },\r\n        function () {\r\n          if (chrome.runtime.lastError) {\r\n            // console.error('Failed to inject content script: ' + chrome.runtime.lastError.message);\r\n          } else {\r\n            chrome.tabs.sendMessage(tabId, message);\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      chrome.tabs.sendMessage(tabId, message);\r\n    }\r\n  });\r\n}\r\n\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request.action === 'regenerateAnalysis') {\r\n    chrome.storage.local.get('lastScreenshot', (result) => {\r\n      const lastScreenshot = result.lastScreenshot;\r\n\r\n      if (lastScreenshot) {\r\n        analyzeScreenshot(lastScreenshot, true);\r\n        sendResponse({ success: true });\r\n      } else {\r\n        console.error(\"No screenshot available for regeneration.\");\r\n        sendResponse({ success: false, error: \"No screenshot available for regeneration.\" });\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n});\r\n\r\nasync function queryChatGPT(questionText, imageUrl, originalQuestionText, callback) {\r\n  try {\r\n    const { sessionId, userEmail } = await new Promise((resolve) =>\r\n      chrome.storage.local.get(['sessionId', 'userEmail'], result => resolve({ sessionId: result.sessionId, userEmail: result.userEmail }))\r\n    );\r\n\r\n    if (!sessionId) {\r\n      console.error(\"User is not authenticated.\");\r\n      return callback(\"Error: User not logged in.\");\r\n    }\r\n\r\n    const mode = await new Promise((resolve) =>\r\n      chrome.storage.local.get(['markingMode'], result => resolve(result.markingMode || 'default'))\r\n    );\r\n\r\n    const response = await fetch('https://us-central1-quizonator-a4513.cloudfunctions.net/api/query-chatgpt-new', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-session-id': sessionId,\r\n        'x-user-email': userEmail\r\n      },\r\n      body: JSON.stringify({\r\n        questionText,\r\n        imageUrl,\r\n        mode,\r\n        originalQuestionText\r\n      })\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.error) {\r\n      console.error(\"Error from backend:\", data.error);\r\n      return callback(`Error: ${data.error}`);\r\n    }\r\n\r\n    callback(data.answer);\r\n\r\n  } catch (error) {\r\n    console.error(\"Error querying backend:\", error);\r\n    callback(\"Error: Unable to fetch response from backend.\");\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function queryChatGPTNew(questionData, isMultipleCorrect, callback) {\r\n  try {\r\n    // Pobieramy sessionId, userEmail itp. z chrome.storage (jeśli tego wymaga logika)\r\n    const { sessionId, userEmail, markingMode } = await new Promise((resolve) =>\r\n      chrome.storage.local.get(['sessionId', 'userEmail', 'markingMode'], (result) => {\r\n\r\n        resolve({\r\n          sessionId: result.sessionId,\r\n          userEmail: result.userEmail,\r\n          markingMode: result.markingMode\r\n        })\r\n      }\r\n      ));\r\n\r\n    if (!sessionId) {\r\n      console.error(\"User is not authenticated.\");\r\n      return callback(\"Error: User not logged in.\");\r\n    }\r\n\r\n\r\n    // Wywołanie backendu\r\n    const response = await fetch('https://us-central1-quizonator-a4513.cloudfunctions.net/api/query-chatgpt-json', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-session-id': sessionId,\r\n        'x-user-email': userEmail\r\n      },\r\n      body: JSON.stringify({\r\n        questionData, // <-- najważniejsze: przekazujemy obiekt\r\n        userEmail,\r\n        mode: markingMode || 'error'\r\n\r\n      })\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.error) {\r\n      console.error(\"Error from backend:\", data.error);\r\n      return callback(`Error: ${data.error}`);\r\n    }\r\n\r\n    // Backend zwraca np. { answer: \"...\", or json }, w data.answer\r\n    callback(data.answer);\r\n\r\n  } catch (error) {\r\n    console.error(\"Error querying backend:\", error);\r\n    callback(\"Error: Unable to fetch response from backend.\");\r\n  }\r\n}\r\n\r\nasync function queryChatGPTMicrosoftForms(questionData, isMultipleCorrect, platform = 'microsoftForms', quizId = null, callback, pin) {\r\n  try {\r\n    const { sessionId, userEmail, markingMode } = await new Promise((resolve) =>\r\n      chrome.storage.local.get(['sessionId', 'userEmail', 'markingMode'], result => {\r\n        resolve({\r\n          sessionId: result.sessionId,\r\n          userEmail: result.userEmail,\r\n          markingMode: result.markingMode\r\n        })\r\n      }\r\n      ));\r\n\r\n    if (!sessionId) {\r\n      console.error(\"User is not authenticated.\");\r\n      return callback(\"Error: User not logged in.\");\r\n    }\r\n\r\n    // Budowanie payloadu w zależności od platformy\r\n    const payload = {\r\n      questionData,\r\n      userEmail,\r\n      mode: markingMode || 'default',\r\n      platform\r\n    };\r\n    if (platform === 'quizizz') {\r\n      if (quizId) {\r\n        payload.quizId = quizId;\r\n      }\r\n      if (pin) {\r\n        payload.pin = pin;\r\n      }\r\n    }\r\n    console.log(payload)\r\n    const response = await fetch('https://us-central1-quizonator-a4513.cloudfunctions.net/api/query-chatgpt-mf', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-session-id': sessionId,\r\n        'x-user-email': userEmail\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"Backend response for Microsoft Forms:\", data);\r\n    if (data.error) {\r\n      console.error(\"Error from backend:\", data.error);\r\n      return callback(`Error: ${data.error}`);\r\n    }\r\n\r\n    callback(data.answer);\r\n\r\n  } catch (error) {\r\n    console.error(\"Error querying backend:\", error);\r\n    callback(\"Error: Unable to fetch response from backend.\");\r\n  }\r\n}\r\n\r\n\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request.action === 'captureAndAnalyzeScreenshot') {\r\n    sendResponse({ success: true });\r\n\r\n    captureAndAnalyzeScreenshot(request.area, sender.tab.id).catch((error) => {\r\n      console.error('Error:', error);\r\n\r\n      sendMessageToContentScript(tabId, { action: 'displayAnalysis', analysis: analysis });\r\n\r\n    });\r\n    return true;\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\nasync function captureAndAnalyzeScreenshot(area, tabId) {\r\n  try {\r\n    const dataUrl = await captureVisibleTab();\r\n    const croppedDataUrl = await cropImage(dataUrl, area);\r\n    const analysis = await analyzeScreenshot(croppedDataUrl);\r\n    chrome.tabs.sendMessage(tabId, { action: 'displayAnalysis', analysis: analysis });\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction captureVisibleTab() {\r\n  return new Promise((resolve, reject) => {\r\n    chrome.tabs.captureVisibleTab(null, { format: 'png' }, (dataUrl) => {\r\n      if (chrome.runtime.lastError) {\r\n        reject(new Error(chrome.runtime.lastError.message));\r\n      } else {\r\n        resolve(dataUrl);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction cropImage(dataUrl, area) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(dataUrl)\r\n      .then(response => response.blob())\r\n      .then(blob => createImageBitmap(blob))\r\n      .then(imageBitmap => {\r\n        const canvas = new OffscreenCanvas(area.width, area.height);\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(imageBitmap, area.x, area.y, area.width, area.height, 0, 0, area.width, area.height);\r\n        return canvas.convertToBlob();\r\n      })\r\n      .then(blob => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => resolve(reader.result);\r\n        reader.onerror = () => reject(new Error('Failed to convert blob to data URL'));\r\n        reader.readAsDataURL(blob);\r\n      })\r\n      .catch(error => reject(error));\r\n  });\r\n}\r\n\r\nfunction analyzeScreenshot(dataUrl, isRegeneration = false) {\r\n  chrome.storage.local.get(['sessionId', 'userEmail'], async (result) => {\r\n    const sessionId = result.sessionId;\r\n    const userEmail = result.userEmail;\r\n\r\n    if (!sessionId || !userEmail) {\r\n      chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n        chrome.tabs.sendMessage(tabs[0].id, {\r\n          action: 'displayAnalysis',\r\n          analysis: \"Error: User not logged in. Please log in again.\"\r\n        });\r\n      });\r\n      return;\r\n    }\r\n    chrome.storage.local.set({ lastScreenshot: dataUrl });\r\n\r\n    try {\r\n\r\n      const response = await fetch('https://us-central1-quizonator-a4513.cloudfunctions.net/api/query-chatgpt', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-session-id': sessionId,\r\n          'x-user-email': userEmail\r\n        },\r\n        body: JSON.stringify({\r\n          questionText: `\r\n           Twoje zadania to:\r\n            a. Sprawdź, czy zawiera treść/pytanie/zadanie, które możesz rozwiązać.\r\n            b. Jeśli tak:\r\n            i. Zidentyfikuj poprawną odpowiedź.\r\n            ii. Wypisz poprawną odpowiedź w formacie łatwym do wyekstraktowania z tekstu (np. \"A\", \"A,B,C\", \"1,2,3\" lub krótka odpowiedź słowna, ważne żeby to była jedna krótka fraza zawsze). Jeśli odpowiedź lub pytanie zawiera elementy matematyczne, zapisz je w notacji LaTeX.\r\n            iii. Podaj uzasadnienie, dlaczego wybrałeś tę konkretną odpowiedź, używając Latex dla wzorów matematycznych.\r\n            c. Jeśli obraz nie zawiera żadnego zadania:\r\n            i. W polu wyekstraktowanej odpowiedzi wpisz \"błąd\".\r\n            ii. Podaj krótką informację, że przekazane zdjęcie jest niewłaściwe.\r\n            Przykład odpowiedzi gdy obraz zawiera pytanie quizowe:\r\n            - Wyekstraktowana odpowiedź: A\r\n            - Uzasadnienie: Wybrałem odpowiedź A, ponieważ w treści pytania jest mowa o X, a odpowiedź A najlepiej to opisuje. Notacja matematyczna: \\( E = mc^2 \\).\r\n            Przykład odpowiedzi gdy obraz nie zawiera zadania:\r\n            - Wyekstraktowana odpowiedź: błąd\r\n            - Informacja: Przekazane zdjęcie nie zawiera pytania.\r\n          `,\r\n          imageUrl: dataUrl,\r\n          mode: 'snapshot'\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        throw new Error(data.error);\r\n      }\r\n\r\n      const analysis = data.answer;\r\n\r\n      if (isRegeneration) {\r\n        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n          sendMessageToContentScript(tabs[0].id, { action: 'updateAnalysis', analysis: analysis });\r\n        });\r\n      } else {\r\n        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n          sendMessageToContentScript(tabs[0].id, { action: 'displayAnalysis', analysis: analysis });\r\n        });\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(\"Error analyzing screenshot:\", error);\r\n      chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n        sendMessageToContentScript(tabs[0].id, { action: 'displayAnalysis', analysis: \"Error: Unable to analyze screenshot.\" });\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.type === \"QUERY_CHATGPT\") {\r\n    queryChatGPT(message.questionText, message.imageUrl, message.originalQuestionText, (answer) => {\r\n      sendResponse({ answer: answer });\r\n    });\r\n    return true;\r\n  }\r\n});\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.type === \"QUERY_CHATGPT_NEW\") {\r\n    queryChatGPTNew(message.questionData, message.isMultipleCorrect, (answer) => {\r\n      sendResponse({ answer: answer });\r\n    });\r\n    return true;\r\n  }\r\n});\r\n\r\nchrome.commands.onCommand.addListener((command) => {\r\n  if (command === \"panic-button\") {\r\n    selfDestruct();\r\n  }\r\n});\r\nchrome.runtime.onMessage.addListener((message) => {\r\n  if (message.action === \"selfDestruct\") {\r\n    selfDestruct();\r\n  }\r\n});\r\n// Funkcja autodestrukcji\r\nfunction selfDestruct() {\r\n  // Opcjonalnie: wyczyść dane przechowywane przez rozszerzenie\r\n  chrome.storage.local.clear(() => {\r\n    console.log(\"Dane lokalne wyczyszczone\");\r\n  });\r\n\r\n  // Odinstaluj rozszerzenie\r\n  chrome.management.uninstallSelf({ showConfirmDialog: false });\r\n}\r\n\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.type === \"QUERY_CHATGPT_MF\") {\r\n    // console.log(\"Received QUERY_CHATGPT_MF message:\", message);\r\n\r\n    // Determine which platform this is from\r\n    if (message.platform === \"googleForms\") {\r\n      // console.log(\"Detected Google Forms platform, preparing data...\");\r\n      queryChatGPTMicrosoftForms(\r\n        message.questionData,\r\n        message.isMultipleCorrect,\r\n        'googleForms',\r\n        null,\r\n        (answer) => {\r\n          // console.log(\"Backend response for Google Forms:\", answer);\r\n          sendResponse({ answer: answer });\r\n        }\r\n      );\r\n    } else if (message.platform === \"quizizz\") {\r\n      // console.log(\"Detected Quizizz platform, preparing data...\");\r\n      queryChatGPTMicrosoftForms(  // Zmieniono z queryChatGPT\r\n        message.questionData,\r\n        message.isMultipleCorrect,\r\n        'quizizz',\r\n        message.quizId,\r\n        (answer) => {\r\n          // console.log(\"Backend response for Quizizz:\", answer);\r\n          sendResponse({ answer: answer });\r\n        },\r\n        message.pin\r\n      );\r\n    } else if (message.platform === \"vseosvita\") {\r\n      // console.log(\"Detected Vseosvita platform, preparing data...\");\r\n      queryChatGPTMicrosoftForms(  // Zmieniono z queryChatGPT\r\n        message.questionData,\r\n        message.isMultipleCorrect,\r\n        'vseosvita',\r\n        message.quizId,\r\n        (answer) => {\r\n          // console.log(\"Backend response for Vseosvita:\", answer);\r\n          sendResponse({ answer: answer });\r\n        },\r\n        message.pin\r\n      );\r\n    } else {\r\n      // Default Microsoft Forms handler\r\n      queryChatGPTMicrosoftForms(  // Zmieniono z queryChatGPT\r\n        message.questionData,\r\n        message.isMultipleCorrect,\r\n        'microsoftForms',\r\n        null,\r\n        (answer) => {\r\n          sendResponse({ answer: answer });\r\n        }\r\n      );\r\n    }\r\n    return true; // Required for async sendResponse\r\n  }\r\n});\r\n\r\n// Dodaj ten nasłuchiwacz na końcu pliku background.js\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.type === 'FIREBASE_AUTH_FROM_WEBAPP') {\r\n    // Przekaż wiadomość do popupu bez dodatkowego przetwarzania\r\n    chrome.runtime.sendMessage(message);\r\n    sendResponse({ success: true });\r\n    return true;\r\n  }\r\n});\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  // Zmieniono typ wiadomości na bardziej generyczny\r\n  if (message.type === \"QUIZ_DATA\") {\r\n    // console.log(`Background: Received QUIZ_DATA from platform: ${message.payload.platform}`, message.payload);\r\n    sendDataToBackend(message.payload, sendResponse); // message.payload zawiera teraz 'platform' i 'userEmail'\r\n    return true;\r\n  }\r\n});","export async function sendDataToBackend(data, sendResponse) {\r\n    console.log(\"Background: Sending data to backend:\", data);\r\n    try {\r\n        const response = await fetch('https://us-central1-quizonator-a4513.cloudfunctions.net/processNaurokQuizData', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorData = await response.text();\r\n            throw new Error(`HTTP error! status: ${response.status}, details: ${errorData}`);\r\n        }\r\n\r\n        const result = await response.json();\r\n        // console.log(\"Background: Response from backend:\", result);\r\n        sendResponse({ success: true, data: result });\r\n    } catch (error) {\r\n        // console.error(\"Background: Error sending data to backend:\", error);\r\n        sendResponse({ success: false, error: error.message });\r\n    }\r\n}\r\n"],"names":["sendMessageToContentScript","tabId","message","chrome","tabs","sendMessage","action","response","runtime","lastError","status","scripting","executeScript","target","files","async","queryChatGPTMicrosoftForms","questionData","isMultipleCorrect","platform","arguments","length","undefined","quizId","callback","pin","sessionId","userEmail","markingMode","Promise","resolve","storage","local","get","result","console","error","payload","mode","log","fetch","method","headers","body","JSON","stringify","data","json","answer","analyzeScreenshot","dataUrl","isRegeneration","set","lastScreenshot","questionText","imageUrl","Error","analysis","query","active","currentWindow","id","selfDestruct","clear","management","uninstallSelf","showConfirmDialog","onMessage","addListener","request","sender","sendResponse","success","area","reject","captureVisibleTab","format","croppedDataUrl","then","blob","createImageBitmap","imageBitmap","canvas","OffscreenCanvas","width","height","getContext","drawImage","x","y","convertToBlob","reader","FileReader","onloadend","onerror","readAsDataURL","catch","cropImage","captureAndAnalyzeScreenshot","tab","type","originalQuestionText","queryChatGPT","queryChatGPTNew","commands","onCommand","command","ok","errorData","text","sendDataToBackend"],"sourceRoot":""}